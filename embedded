          Lab File on EMBEDDED SYSTEMS DESIGN-UCS704

 
List of Experiments	Page numbers
Experiment 1 (Truth Table and Logic Gates)	            3
Experiment 2 (Half Adder)	           16
Experiment 3 (Full Adder)	           18
Experiment 4 (Half Subtractor)	           20
Experiment 5 (Number Converter)	           22
Experiment 6 (Multiplexer)	           24
Experiment 7 (Demultiplexer)	          26
Experiment 8 (Decoder)	          28
Experiment 9 (Encoder)	          30
Experiment 10 (Flip-Flops )	          31
Experiment 11 (Flip-Flops )	          33
Experiment 12 (Counter)	          35

 
Experiment 1 (Truth Table and Logic Gates)

And Gate
Code:

module and_gate_1;
reg a, b; 
wire z, temp; 

assign temp = b;
and my_and(z, a, temp);
always @(a or b)
begin
$display("a= %b b= %b z= %b", a, b, z);
end

initial
begin
a = 0; b = 0;
#10
a = 0; b = 1;
#10
a = 1; b = 0;
#10
a = 1; b = 1;

end
endmodule

Image:
 
Not Gate:

Code:

module not_gate (
    input a,      // Input
    output y      // Output
);

    // NOT operation
    assign y = ~a;

endmodule

// Testbench
module not_gate_tb;

    // Testbench variables
    reg a;
    wire y;

    // Instantiate the NOT gate module
    not_gate uut (
        .a(a),
        .y(y)
    );

    initial begin
        // Monitor the output
        $monitor("a=%b, y=%b", a, y);

        // Test cases
        a = 0; #10;
        a = 1; #10;

        $finish;
    end

endmodule

Image:
 

OR gate:
Code:

module or_gate (
    input a,      // First input
    input b,      // Second input
    output y      // Output
);

    // OR operation
    assign y = a | b;

endmodule

// Testbench
module or_gate_tb;

    // Testbench variables
    reg a;
    reg b;
    wire y;

    // Instantiate the OR gate module
    or_gate uut (
        .a(a),
        .b(b),
        .y(y)
    );

    initial begin
        // Monitor the output
        $monitor("a=%b, b=%b, y=%b", a, b, y);

        // Test cases
        a = 0; b = 0; #10;
        a = 0; b = 1; #10;
        a = 1; b = 0; #10;
        a = 1; b = 1; #10;

        $finish;
    end

endmodule

Image:
 


NAND Gate:

Code:
module nand_gate (
    input a,      // First input
    input b,      // Second input
    output y      // Output
);

    // NAND operation
    assign y = ~(a & b);

endmodule

// Testbench
module nand_gate_tb;

    // Testbench variables
    reg a;
    reg b;
    wire y;

    // Instantiate the NAND gate module
    nand_gate uut (
        .a(a),
        .b(b),
        .y(y)
    );

    initial begin
        // Monitor the output
        $monitor("a=%b, b=%b, y=%b", a, b, y);

        // Test cases
        a = 0; b = 0; #10;
        a = 0; b = 1; #10;
        a = 1; b = 0; #10;
        a = 1; b = 1; #10;

        $finish;
    end

endmodule

Image:
 

NOR Gate:
Code:
module nor_gate (
    input a,      // First input
    input b,      // Second input
    output y      // Output
);

    // NOR operation
    assign y = ~(a | b);

endmodule

// Testbench
module nor_gate_tb;

    // Testbench variables
    reg a;
    reg b;
    wire y;

    // Instantiate the NOR gate module
    nor_gate uut (
        .a(a),
        .b(b),
        .y(y)
    );

    initial begin
        // Monitor the output
        $monitor("a=%b, b=%b, y=%b", a, b, y);

        // Test cases
        a = 0; b = 0; #10;
        a = 0; b = 1; #10;
        a = 1; b = 0; #10;
        a = 1; b = 1; #10;

        $finish;
    end

endmodule

Image:

 

EX-OR gate:
Code:

module xor_gate (
    input a,      // First input
    input b,      // Second input
    output y      // Output
);

    // XOR operation
    assign y = a ^ b;

endmodule

// Testbench
module xor_gate_tb;

    // Testbench variables
    reg a;
    reg b;
    wire y;

    // Instantiate the XOR gate module
    xor_gate uut (
        .a(a),
        .b(b),
        .y(y)
    );

    initial begin
        // Monitor the output
        $monitor("a=%b, b=%b, y=%b", a, b, y);

        // Test cases
        a = 0; b = 0; #10;
        a = 0; b = 1; #10;
        a = 1; b = 0; #10;
        a = 1; b = 1; #10;

        $finish;
    end

endmodule

Image:
 


EX-NOR Gate
Code:

module xnor_gate (
    input a,      // First input
    input b,      // Second input
    output y      // Output
);

    // XNOR operation
    assign y = ~(a ^ b);

endmodule

// Testbench
module xnor_gate_tb;

    // Testbench variables
    reg a;
    reg b;
    wire y;

    // Instantiate the XNOR gate module
    xnor_gate uut (
        .a(a),
        .b(b),
        .y(y)
    );

    initial begin
        // Monitor the output
        $monitor("a=%b, b=%b, y=%b", a, b, y);

        // Test cases
        a = 0; b = 0; #10;
        a = 0; b = 1; #10;
        a = 1; b = 0; #10;
        a = 1; b = 1; #10;

        $finish;
    end

endmodule

Image:
 













 

Experiment 2 (Half Adder)

Code:
Half Adder Verilog Code:
saved as “halfadder.v”
module halfadder(a, b, sum, carry);
input a, b;
output sum,carry;

/* Using data flow level */
assign sum = a ^ b; //sum bit
assign carry = a & b; //carry bit

/* using gate level*/
/*
 xor x1(sum, a, b);
 and a1(carry, a, b);
 */
endmodule

Testbench Code:
saved as “halfadder_tb.v”
module halfadder_tb;
reg a, b;
wire sum, carry;
halfadder add1(a, b, sum, carry);
initial
begin
$monitor("Time = %d: A= %b	B= %b	Sum =%b	Carry = %b\n", $time, a, b, sum, carry);
a = 0; b = 0;
#1
b = 1;
#1
a = 1;
#1
b = 0;
end
endmodule

Image:
 










 
Experiment 3(Full Adder)

Code:
Full Adder Verilog Code:
saved as “fulladder.v”

module fulladder(a, b, c, sum, carry);
input a, b, c;
output sum, carry;
wire sum, carry;
assign sum = a^b^c; //sum bit
assign carry = ((a&b) | (b&c) | (a&c)); //carry bit
endmodule

Testbench Code:
saved as “fulladder_tb.v”

module main;
reg a, b, c;
wire sum, carry;
fulladder add(a, b, c, sum, carry);
always @(sum or carry)
begin
$dumpfile("add.vcd");
$dumpvars(0, add);
$display("Input A= %b B= %b C= %b Sum = %b Carry = %b\n", a, b, c, sum, carry);
End
initial
begin
a= 0; b= 0; c= 0;
#5
a= 0; b= 0; c= 1;
#5
a= 0; b= 1; c= 0;
#5
a= 0; b= 1; c= 1;
#5
a= 1; b= 0; c= 0;
#5
a= 1; b= 0; c= 1;
#5
a= 1; b= 1; c= 0;
#5
a= 1; b= 1; c= 1;
end
endmodule



Image:
 
















 
Experiment 4(Half Subtractor)

Code:
Half subtractor Verilog Code:
saved as “halfsub.v”

module half_sub(input a, b, output D, B);
  assign D = a ^ b;
  assign B = ~a & b;
endmodule

Testbench Code:
saved as “halfsub_tb.v”

module half_sub_tb;
  reg a, b;
  wire D, B;
  
  half_sub hs(a, b, D, B);
  
  initial begin
    $monitor("a=%b b=%b, difference=%b, borrow=%b", a,b,D,B);

a = 0; b = 0;
    #1;
    a = 0; b = 1;
    #1;
    a = 1; b = 0;
    #1;
    a = 1; b = 1;
  end
endmodule







Image:
 
















 
Experiment 5(Number Converter)

Code:
Number Converter Verilog Code:
saved as “numconvert.v”

module BCD2Ex3(A, B, C, D, W, X, Y, Z);
	input A, B, C, D;
	output W, X, Y, Z;
	assign W = A | (B&C) | (B&D);                                                   
	assign X = (~B&C) | (~B & D) | (B & ~C & ~D);
	assign Y = ~( C ^ D);
	assign Z = ~D;
endmodule
Test bench code:
saved as “numconvert_tb.v”

module test;
wire W, X,Y,Z;
reg A,B,C,D;
BCD2Ex3  object(A,B,C,D,W,X,Y,Z);
initial begin
	$dumpfile("bcd.vcd");
	$dumpvars(0,test);
	$display (" A  B  C  D |  W  X  Y  Z");
	$monitor(" ",A, "  ",B, "  ",C, "  ",D,  " | ", W, "  ",X, "  ",Y, "  ",Z);
	A = 0;  B = 0; C = 0; D = 0;
	#5  A = 0;  B = 0;  C = 0;  D = 0;
	#5  A = 0;  B = 0;  C = 0;  D = 1;
	#5  A = 0;  B = 0;  C = 1;  D = 0;
	#5  A = 0;  B = 0;  C = 1;  D = 1;
	#5  A = 0;  B = 1;  C = 0;  D = 0;
	#5  A = 0;  B = 1;  C = 0;  D = 1;
	#5  A = 0;  B = 1;  C = 1;  D = 0;
	#5  A = 0;  B = 1;  C = 1;  D = 1;
	#5  A = 1;  B = 0;  C = 0;  D = 0;
	#5  A = 1;  B = 0;  C = 0;  D = 1;
	end
endmodule
Image:
 














 
Experiment 6(Multiplexer)

Code:
Number Converter Verilog Code:
saved as “multiplexer.v”

module mux(s1,s2,a,b,c,d,y);
	input s1,s2,a,b,c,d;
	output y;
	assign y = ~s1&~s2&a | ~s1&s2&b | s1&~s2&c | s1&s2&d ;
endmodule

Test bench code:
saved as “multiplexer_tb.v”

module test;
	reg a, b, c, d, s1, s2;
	wire y;
	mux obj(s1,s2,a,b,c,d,y);
	initial begin
		//$dumpfile("mux.vcd");
		//$dumpvars( 0, test);
		$display("S1\t S2\t A \t B \t C \t D |  Y");
		$monitor("%b \t %b \t %b \t %b \t %b \t %b |  %b",s1,s2,a,b,c,d,y);
a=0; b=0; c=0; d=0; s1=0; s2=0;
		#5  a=0; b=0; c=0; d=0; s1=0; s2=0;
		#5  a=0; b=0; c=0; d=1; s1=0; s2=1;
		#5  a=0; b=0; c=1; d=0; s1=1; s2=0;
		#5  a=0; b=0; c=1; d=1; s1=1; s2=1;
		#5  a=0; b=1; c=0; d=0; s1=0; s2=0;
		#5  a=0; b=1; c=0; d=1; s1=0; s2=1;
		#5  a=0; b=1; c=1; d=0; s1=1; s2=0;
		#5  a=0; b=1; c=1; d=1; s1=1; s2=0;
		#5  a=1; b=0; c=0; d=0; s1=0; s2=1;
		#5  a=1; b=0; c=0; d=1; s1=0; s2=0;
		#5 $finish;
	end
endmodule 


Image:
 


 
Experiment 7 (Demultiplexer)

Code:
Number Converter Verilog Code:
saved as “demultiplexer.v”

module demux(s1,s0,a,b,c,d,e,i);
	input s1,s0,e,i;
	output a,b,c,d;
	assign a =i&e&~s1&~s0;
	assign b =i&e&~s1&s0;
	assign c =i&e&s1&~s0;
	assign d =i&e&s1&s0;
endmodule

Test bench code:
saved as “demultiplexer_tb.v”

module test;
	reg s1, s0, e, i;
	wire a, b, c, d;
	demux obj(s1,s0,a,b,c,d,e,i);
	initial 
		begin
		//$dumpfile("demux.vcd");
		//$dumpvars(0, test);
		$display("e\ts1\ts0\td\tc\tb\ta");
		$monitor("%b\t%b\t%b\t%b\t%b\t%b\t%b" ,e,s1,s0,d,c,b,a);
		i=1; e=0; s1=0; s0=0;
		#10  i=1; e=1; s1=0; s0=0;
		#10  i=1; e=1; s1=0; s0=1;
		#10  i=1; e=1; s1=1; s0=0;
		#10  i=1; e=1; s1=1; s0=1;
	 //$finish;
	end
endmodule



Image:
 

 
Experiment 8 (Decoder)
Code:
Decoder Verilog Code:
saved as “decoder.v”

module decoder(a,b,c,d,e,f,E);
	input a,b,E;
	output c,d,e,f;
	assign c = E&a&b;
	assign d = E&a&(~b);
	assign e = E&(~a)&b;
	assign f = E&(~a)&(~b);
endmodule 

Test bench code:
saved as “decoder_tb.v”
module testbench;
	reg a, b, E;
	wire c,d,e,f;
	decoder obj(a,b,c,d,e,f,E);
	initial begin
		$display("Inputs      |  Outputs");
		$display("E  a  b  |  c  d  e  f");
		$monitor("%b  %b  %b  |  %b  %b  %b  %b",E,a,b,c,d,e,f);
		E=0 ; a=0; b=0; 
		#5 E=1; a=0; b=0; 
		#5 E=1; a=0; b=1; 
		#5 E=1; a=1; b=0;
		#5 E=1; a=1; b=1;
		#5	$finish;
	end
endmodule






Image:
 




 
Experiment 9(Encoder)

Code:
Encoder Verilog Code:
saved as “Encoder.v”

module encoder(a,b,c,d,p,q);
	input a,b,c,d;
	output p,q;
	assign p = a | b;
	assign q = a | c;
endmodule

Test bench code:
saved as “Encoder_tb.v”
module test;
	reg a, b, c, d;
	wire p,q;
	encoder obj(a,b,c,d,p,q);
	initial begin
		
		$display("Inputs      |  Outputs");
		$display("A  B  C  D  |  P  Q");
		$monitor("%b  %b  %b  %b  |  %b  %b",a,b,c,d,p,q);
		a=0; b=0; c=0; d=1; 
		#5 a=0; b=0; c=1; d=0; 
		#5 a=0; b=1; c=0; d=0; 
		#5 a=1; b=0; c=0; d=0;
		
	end
endmodule
Image:
 
 
                                  Experiment 10 (D Flip-Flop)
Code:
D-flip flop Verilog Code:
saved as “dflipflop.v”

module Sdff(d,rstn,clk,q);
input d,rstn,clk;
output reg q;
always@(posedge clk)
	if (!rstn )
		q<=0;
	else
		q<=d;
endmodule

Test bench code: 
saved as “dflipflop_tb.v”


module tv_dff;
 reg d,rstn,clk;
 Sdff obj(d,rstn,clk,q);
always #10 clk = ~clk;
initial begin
 $display(" T\treset \t clk \t D \t|  q");
$monitor(" %0t \t %d \t  %d  \t %d | %d",$time,rstn,clk,d,q);
 end
integer i;
	initial begin	
		clk =0; d =0; rstn  =0;
		
		#5 rstn =1;
	
		repeat(6) begin
		      d =$urandom_range(0,1);
		     #5;
		end
		rstn = 0; 
		//#5 rstn = 1;
		repeat(6) begin
		      d =$urandom_range(0,1);
		     #5;
		end
		$finish;
	end		
endmodule  
Image:
 
Experiment 11(JK Flip Flop)
Code:
JK Flip Flop Verilog Code:
saved as “jkflipflop.v”
module jkff(input [1:0] jk,input clk,output q,output qb);
	reg q,qb;
	always@(posedge clk)
	begin
		case(jk)
		        2'b00:    q=q;
		        2'b01:     q=0;
		        2'b10:     q=1;
		         2'b11:     q=~q;
		endcase
		qb=~q;
	end
endmodule

Testbench:
Saved file as jkflipflop_tb.v
module test;
	reg [1:0] jk;
	reg clk,i;
	wire q,qb;
	jkff ob(jk,clk,q,qb);
	
	initial begin
		$dumpfile("first.vcd");
		$dumpvars(1,test);
		$display("time\tclk\tjk1\tjk0\tq\t~q");
		$monitor("%0t\t%b\t%b\t%b\t%b\t%b",$time,clk,jk[1],jk[0],q,qb);
		jk=2'b00;   #10
		jk=2'b01;    #10
		jk=2'b10;    #10
		jk=2'b11;     #10
		$finish;
	end
	initial begin
		clk=0;
		for(i=0;i<=20;i++)
		#5 clk=~clk;
	end
endmodule
Image:
 

                                           Experiment 12(Counters)

Up Counter/Down counter:
Verilog Code for up counter:
Saved file as upcounter.v

module up_counter(input clk, reset, output[3:0] counter ); 
reg [3:0] counter_up; // up counter 
always @(posedge clk or posedge reset) 
begin 	
	if(reset) 
		counter_up <= 4'd0;    // counter_down <= 4‘hf; 
	else 
		counter_up <= counter_up + 4'd1; 
	         // counter_down <= counter_down - 4‘f1; 
end 
assign counter = counter_up; 
endmodule

Testbench code
Saved file as upcounter_tb.v
module upcounter_testbench; 
reg clk, reset; 
wire [3:0] counter; 
integer a;
up_counter dut(clk, reset, counter); 
initial begin 
clk=0; 
for( a=0;a<10;a++) 
#10 clk = ~clk; 
end 	
initial begin 
$display("time\tclk\treset\tcounter");
$monitor("%0t\t%b\t%b\t%b",$time,clk,reset,counter); 
reset=1; 
#20 
reset=0; 
end 
endmodule 



Image:
 





Updown Counter


Verilog Code for updown counter
Saved file as “updowncounter.v”

module up_down_counter(input clk, reset,up_down, output[3:0] counter ); 
reg [3:0] counter_up_down; // down counter 
always @(posedge clk or posedge reset) 
begin 
	if(reset) 
		counter_up_down <= 4‘h0;
	 else if (~up_down) 
		counter_up_down <= counter_up_down + 4‘h1; 	else 
		counter_up_down <= counter_up_down - 4‘h1;
end 
assign counter = counter_up_down; 
end module

Testbench code:
Verilog Code for updown counter
Saved file as “updowncounter_tb.v”



module updowncounter_testbench; 
reg clk, reset,up_down;                        
wire [3:0] counter; integer a;
up_down_counter dut(clk, reset,up_down, counter); 
initial begin 
clk=0;
 for( a=0;a<10;a++) 
#10 clk = ~clk;  
end 
initial begin 
$display("time\tclk\treset\tup_down\tcounter");
$monitor("%0t\t%b\t%b\t%b\t%b",$time,clk,reset,up_down,counter); 
reset=1; 
up_down=0; 
#20; 
reset=0; 
#20; up_down=1; 
end 
endmodule 

Image:
 


